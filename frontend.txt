```
time.hpp
```
#ifndef _TIME_
#define _TIME_

#include <chrono>
#include <ostream>
#include <string>

class Record;
class Time {
  friend std::ostream &operator<<(std::ostream &, const Time &);
  friend bool dist_bigger_than_three_days(const Time &, const Time &);

public:
  Time() = default;
  Time(std::chrono::time_point<std::chrono::system_clock>);
  Time(const std::string &);
  std::string str() const;
  const std::chrono::time_point<std::chrono::system_clock> &unix_time() const;

private:
  std::chrono::time_point<std::chrono::system_clock> time = std::chrono::system_clock::now();
};

std::ostream &operator<<(std::ostream &, const Time &);
bool dist_bigger_than_three_days(const Time &, const Time &);

#endif


```
time.cpp
```

#include "time.hpp"
#include <chrono>
#include <format>
#include <ostream>
#include <sstream>
#include <string>

std::ostream &operator<<(std::ostream &out, const Time &t) {
  return out << t.str();
}

bool dist_bigger_than_three_days(const Time &lhs, const Time &rhs) {
  std::chrono::sys_seconds s_l(floor<std::chrono::seconds>(lhs.time));
  std::chrono::sys_seconds s_r(floor<std::chrono::seconds>(rhs.time));
  auto diff = s_r - s_l;
  return diff > std::chrono::days(3);
}

const std::chrono::time_point<std::chrono::system_clock> &Time::unix_time() const {
  return time;
}
std::string Time::str() const { return std::format("{:%Y-%m-%d %H:%M:%S}", time); }

Time::Time(const std::string &tm) {
  std::istringstream is(tm);
  is >> std::chrono::parse("%Y-%m-%d %H:%M:%S", time);
}

Time::Time(std::chrono::time_point<std::chrono::system_clock> tm) : time(tm) {}

```
record.hpp
```
#ifndef _RECORD_
#define _RECORD_

#include "time.hpp"
#include <iostream>
#include <string>

class Record {
  friend std::ostream &operator<<(std::ostream &, const Record &);
  friend bool operator<(const Record &, const Record &);

public:
  Record() = default;
  Record(const std::string &);
  Record(const std::string &, const std::string &);
  Record(const std::string &, const Time &);
  const std::string &name() const;
  const Time &time() const;

private:
  std::string str_name;
  Time cls_time;
};

std::ostream &operator<<(std::ostream &, const Record &);
bool operator<(const Record &, const Record &);

#endif


```
record.cpp
```
#include "record.hpp"
#include "time.hpp"
#include <iostream>
#include <string>

std::ostream &operator<<(std::ostream &out, const Record &r) {
  out << r.name() << "\t" << r.time();
  return out;
}
bool operator<(const Record &lhs, const Record &rhs) {
  return lhs.time().str() < rhs.time().str();
}
Record::Record(const std::string &nm) : str_name(nm) {}
Record::Record(const std::string &nm, const std::string &tm) : str_name(nm), cls_time(tm) {}
Record::Record(const std::string &nm, const Time &tm) : str_name(nm), cls_time(tm) {}
const std::string &Record::name() const { return str_name; }
const Time &Record::time() const { return cls_time; }

```
history.hpp
```
#ifndef _HISTORY_
#define _HISTORY_

#include "record.hpp"
#include <set>
#include <string>

class History {
public:
  History();
  bool picked(const std::string &) const;
  void insert(const Record &) &;
  void insert(Record &&) &&;
  void erase(const Record &);
  void clear();
  bool check(const std::string &);

private:
  std::string fnm = "history.txt";
  std::set<Record> st;
};

#endif

```
history.cpp
```
#include "history.hpp"
#include "record.hpp"
#include <fstream>
#include <set>
#include <string>

History::History() {
  std::ifstream fopen(fnm);
  std::string name, time;
  while (fopen) {
    fopen >> name;
    std::getline(fopen, time);
    st.insert(Record(name, time));
  }
  fopen.close();
}
bool History::picked(const std::string &nm) const {
  for (const auto r : st)
    if (nm == r.name())
      return true;
  return false;
}
void History::insert(const Record &r) & { st.insert(r); }
void History::insert(Record &&r) && { st.insert(std::move(r)); }
void History::erase(const Record &r) { st.erase(r); }
void History::clear() { st.clear(); }
bool History::check(const std::string &name) {
  for (const auto &r : st) {
    if (!dist_bigger_than_three_days(r.time(), Time()) && r.name() == name)
      return false;
  }
  return true;
}

```
randomnamegenerator.hpp
```

#ifndef _RANDOMNAMEGENERATOR_
#define _RANDOMNAMEGENERATOR_

#include "history.hpp"
#include <cstddef>
#include <string>
#include <vector>

class RandomNameGenerator {
public:
  RandomNameGenerator();
  const std::string &gen() const;
  std::string gen_no_recent();

private:
  int rdm(std::vector<std::string>::size_type sz) const;
  History hstry;
  std::string filename_history = "history.txt";
  std::vector<std::string> st, lst{
                                 "石珍丹",
                                 "顾淑楠",
                                 "王子欣",
                                 "胡友成",
                                 "晏佳男",
                                 "刘静岩",
                                 "郑丽莉",
                                 "吴自成",
                                 "谢礼乔",
                                 "王超峰",
                                 "赵紫茹",
                                 "佟鹏鲲",
                                 "常玉亮",
                                 "李旭阳",
                                 "潘恩哲",
                                 "张志强",
                                 "陈安然",
                                 "景磊",
                                 "陈远涛",
                                 "汪磊",
                                 "徐居乐",
                                 "张勐",
                                 "朱汉青",
                                 "闫凯旋",
                                 "路欣宇",
                                 "王鹏飞",
                                 "郭旭",
                                 "顾士亮",
                                 "陈梦豪",
                                 "赵磊",
                                 "赵大鹏",
                                 "纪纲",
                                 "魏彦楠",
                                 "贺洋洋",
                                 "钱成",
                                 "胡硕",
                                 "李晶莹",
                                 "张敬涛",
                                 "徐敏",
                                 "孟响",
                                 "王仕浩",
                                 "娄世起",
                                 "侯海星",
                                 "王蔚深",
                                 "王伟梁",
                                 "周昕卓",
                                 "姜浩楠",
                               };
};

#endif


```
randomnamegenerator.cpp
```

#include "history.hpp"
#include "randomnamegenerator.hpp"
#include "record.hpp"
#include "time.hpp"
#include <chrono>
#include <cstddef>
#include <fstream>
#include <ios>
#include <random>
#include <stdexcept>
#include <string>
#include <vector>

RandomNameGenerator::RandomNameGenerator() : hstry() {
  for (const auto &nm : lst)
    if (hstry.check(nm))
      st.push_back(nm);
}
const std::string &RandomNameGenerator::gen() const {
  return lst[rdm(lst.size())];
}

std::string RandomNameGenerator::gen_no_recent() {
  if (st.empty())
    throw std::runtime_error("");
  int rnd = rdm(st.size());
  Record r(st[rnd], Time());
  std::ofstream fopen("history.txt", std::ios::app);
  fopen << r << std::endl;
  fopen.close();
  hstry.insert(r);
  st.erase(st.begin() + rnd);
  return r.name();
}
int RandomNameGenerator::rdm(std::vector<std::string>::size_type sz) const {
  unsigned seed = static_cast<unsigned>(std::chrono::system_clock::now().time_since_epoch().count());
  std::mt19937 rng(seed);
  std::uniform_int_distribution<int> dist(0, sz - 1);
  return dist(rng);
}
